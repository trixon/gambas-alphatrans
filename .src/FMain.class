' Gambas class file

Private Const KEY_MENUBAR As String = "menubar"
Private Const KEY_TOOLBAR As String = "toolbar"

Private $sTempFile As String = Temp$()
Private $sEncodeFrom As String
Private $sEncodeTo As String
Private $sFilePath As String
Private $sFileEncoding As String
Private $sFileType As String
Private $sMode As String
Private $sOmit As String
Private $aCharacterSets As String[]
Private $bSourcePreviewLoaded As Boolean

Public Sub _new()

End

Static Public Sub Run()

  Dim hForm As New FMain

  hForm.Show()

End

Public Sub Action_Activate(key As String) As Boolean

  Select Case key
    Case "about"
      About()

    Case "menubar"
      Menubar()

    Case "open"
      OpenFileDialog()

    Case "quit"
      Me.Close

    Case "save"
      SaveFile()

    Case "toolbar"
      Toolbar()

    Default
      Print "Unknown action: " & key

  End Select

End

Public Sub Form_KeyPress()

  If Key.Code = Key.Esc Then
    Me.Close()
  Endif

End

Public Sub Form_Open()

  Settings.Read(Me)
  Me.Menus.Visible = Settings[KEY_MENUBAR, True]
  mnuSettingsMenu.Checked = Me.Menus.Visible
  tlbMain.Visible = Settings[KEY_TOOLBAR, True]
  mnuSettingsToolbar.Checked = tlbMain.Visible

  $aCharacterSets = MSys.CharacterSets()
  lstFrom.List = MSys.CharacterSets()
  lstTo.List = lstFrom.List
  UpdateAvailability(False)

  '   OpenFile("~/räksmörgås.txt")

End

Public Sub Form_Close()

  Settings.Write(Me)

End

Private Sub About()

  Dim hForm As New FAbout

  With hForm
    .AppAuthor = "Patrik Karlsson"
    .AppCopyright = "Copyright © 2015 Patrik Karlsson"
    .AppDescription = ("Character encoding made easy")
    .AppLogo = Picture.Load("logo.png")
  End With

  hForm.Run()

End

Private Sub OpenFileDialog()

  Dialog.Title = ("Open")

  If Dialog.OpenFile() Then
    Return
  Endif

  OpenFile(Dialog.Path)

End

Private Sub OpenFile(sFilePath As String)

  $sFilePath = sFilePath
  $sFileEncoding = MSys.MimeEncoding($sFilePath)
  $sFileType = MSys.MimeType($sFilePath)

  PreviewSourceFile($sFilePath, $sFileEncoding)
  lstFrom.Index = lstFrom.Find($sFileEncoding)
  lstTo.Index = lstTo.Find($sFileEncoding)

  UpdateAvailability(True)
  txaFrom.SetFocus()

End

Private Sub Preview()

  If ValidateSource() And ValidateDest() Then
    PreviewSourceFile($sFilePath, lstFrom.Text)
    PreviewDestFile()
    UpdateStatusIndicators()
  Endif

End

Private Sub PreviewDestFile()

  Dim sBaseCommand As String = "iconv --from-code &1 --to-code &2&3 &4 --output &5 &6"
  Dim sCommand As String
  Dim sStatus As String
  Dim sResult As String

  If chkOmit.Value Then
    $sOmit = "-c"
  Else
    $sOmit = ""
  Endif

  File.Save($sTempFile, "")
  txaTo.Text = "Trying to load the converted file back to UTF-8"
  sCommand = Subst(sBaseCommand, lstFrom.Text, lstTo.Text, $sMode, $sFilePath, $sTempFile, $sOmit) & " 2>&1"
  Print sCommand
  Try Shell sCommand To sStatus
  sStatus = Trim(sStatus)

  If sStatus Then
    txaTo.Text = sStatus
  Else
    Try sResult = Conv(File.Load($sTempFile), lstTo.Text, "UTF-8")
    txaTo.Text = sResult
  Endif

End

Private Sub PreviewSourceFile(sPath As String, sEncoding As String)

  $sEncodeFrom = sEncoding
  $bSourcePreviewLoaded = True

  If sEncoding = "BINARY" Then
    Message.Title = ("Warning")
    Message.Warning(Subst(("&1 is a binary file."), sPath))
  Endif

  txaFrom.Text = Conv(File.Load(sPath), sEncoding, "UTF-8")

Finally
  txaFrom.Pos = 0

Catch
  txaFrom.Text = Subst(("Can't preview from &1.\nConversion might still be possible."), sEncoding)
  $bSourcePreviewLoaded = False

End

Private Sub SaveFile()

  Dialog.Title = ("Save As")
  If Dialog.SaveFile() Then Return

  If Exist(Dialog.Path) Then
    Kill Dialog.Path
  Endif

  Copy $sTempFile To Dialog.Path

Catch
  Message.Info(Error.Text)

End

Private Sub Toolbar()

  tlbMain.Visible = Not tlbMain.Visible
  Settings[KEY_TOOLBAR] = tlbMain.Visible

End

Private Sub Menubar()

  Me.Menus.Visible = Not Me.Menus.Visible
  Settings[KEY_MENUBAR] = Me.Menus.Visible

End

Private Sub UpdateAvailability(bOpen As Boolean)

  mnuClose.Enabled = bOpen
  mnuSave.Enabled = bOpen
  tbtSave.Enabled = bOpen
  chkOmit.Enabled = bOpen
  optIgnore.Enabled = bOpen
  optNormal.Enabled = bOpen
  optTranslit.Enabled = bOpen
  txtFrom.Enabled = bOpen
  txtTo.Enabled = bOpen
  lstFrom.Enabled = bOpen
  lstTo.Enabled = bOpen

  If bOpen Then
    '    lblFrom.Text = Subst(("Preview (&1➜UTF-8)"), lstFrom.Text) '$sFilePath
    'lblStatus.Text = $sFileEncoding & " " & $sFileType
    '   lblStatusEncoding.Text = Subst("Encoding: &1  Type: &2  &3", $sFileEncoding, $sFileType, $sFilePath)
  Else
    lblFrom.Text = ""
    lblTo.Text = ""
    lblStatusEncoding.Text = ""
  Endif

End

Private Sub UpdateStatusIndicators()

  lblFrom.Text = Subst(("Preview (&1➜UTF-8)"), $sEncodeFrom)
  lblTo.Text = Subst(("Preview (&1➜UTF-8)"), lstTo.Text)
  lblStatusEncoding.Text = Subst(("Encoding: &1  Type: &2  &3"), $sFileEncoding, $sFileType, $sFilePath)

End

Public Sub txtFrom_Change()

  lstFrom.List = MArrays.FilterStringArray($aCharacterSets, txtFrom.Text)

End

Public Sub txtTo_Change()

  lstTo.List = MArrays.FilterStringArray($aCharacterSets, txtTo.Text)

End

Public Sub Mode_Click()

  $sMode = Last.Tag
  Preview()

End

Public Sub chkOmit_Click()

  Preview()

End

Public Sub lblStatusEncoding_MouseDown()

  lstFrom.Index = lstFrom.Find($sFileEncoding)

End

Public Sub CharacterSet_Select()

  Preview()

End

Private Function ValidateDest() As Boolean

  Return lstTo.Index > -1

End

Private Function ValidateSource() As Boolean

  Return lstFrom.Index > -1 And Exist($sFilePath)

End
